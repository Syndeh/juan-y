No Silver Bullets: Essence and Accidents of Software Engineering by Frederick P. Brooks, Jr.


El autor nos presenta los problemas básicos de la ingenieria de software, haciendo hincapíe en que un producto aparentemente sencillo puede transformarse en una pesadilla de planificacion, presupuesto y productos defectuosos.

No va a existir algo que haga productivo, confiable y simple nuestro software, como la electronica, los transistores y la integracion a larga escala hicieron por el hardware.

Desarrollar software siempre sera dificil, y lo explica enumerando las propiedades esenciales del software como:

La complejidad que conlleva desarrollarlo debido a la falta de repetitividad. Debido a esta complejidad, aparecen dificultades en la comunicacion entre miembros de un equipo, lo cual trae fallas en el producto, sobrecosto y retraso en el tiempo de trabajo.

En cuanto a la conformidad, hace una referencia a la fisica diciendo que ellos tienen que lidiar con factores muy complejos, pero son principios unificados. En cambio en el desarrollo de software esto no pasa, ya que las teconologias cambian porque son desarrollados por personas diferentes.

La variabilidad del software es constante, a diferencia de un auto o un edificio en que los cambios son realizados luego de su construcción. En el caso del software, en teoría, los cambios pueden ser realizados con mayor facilidad.


El software es invisible. Esta abstracción implica diagramar estructuras más complejas como flujo de control, flujo de datos, patrones de dependencia, etc.



A lo largo de los años se implementaron técnicas para atacar las dificultades que el desarrollo de software implica:

- Lenguajes de alto nivel: Libera al programa de muchas complejidades extra que tiene que afrontar el programador.
- Tiempo compartido: Mejora la productividad de los programadores y la calidad de sus productos.
- Ambientes de trabajo unificados: Ataca las dificultades que trae el uso de programas individuales juntos, proveyendo librerias integradas, formatos de archivos unificados, etc.



Ideas que ayudaron al desarrollo:

- Ada: Fue uno de los primeros lenguajes en mejorar los conceptos de lenguaje. Incorporando características para fomentar el diseño moderno y modularización.

- Programación orientada a objetos.
- Inteligencia Artificial.
- Sistemas expertos.
- Programación automatica.
- Programación gráfica.
- Testing
- Herramientas y ambientes de trabajo.
- Workstations

Ataques prometedores en la esencia conceptual:

Compra versus construcción: Explica que es mas barato comprar que construir de nuevo, y éste tipo de software suele ser mejor documentado y mantenido.

Refinamiento de requisitos y la rápida creacion de prototipos: La parte mas dificil de crear software es decidir qué crear. La funcion mas importante del creador de software, es refinar los requerimientos del producto que el cliente solicita. Pero la verdad es que el cliente no sabe lo que quiere.


Grandes diseñadores: Se obtienen grandes diseñadores siguiendo buenas prácticas. Los programadores están entre las personas mas inteligentes de la poblacion asi que pueden aprender la buena práctica.

